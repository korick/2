









progit2-ru-2.0.0
Pro Git 2nd Edition 2014 на русском

origin исходный
up-to-date своевременно, до настоящего времени
unstage убрать из буфера
fetch получать
checkout проверять
pull вытащить
push толкнуть
commit коммит
remote удалённый
upstream обновлённое
merge слияние
workflow рабочий процесс
verbose подробный













FILE TO GITHUB-REPO
LOCAL-REPO TO GITHUB
https://product.hubspot.com/blog/git-and-github-tutorial-for-beginners
Windows http://cygwin.org

.github\CONTRIBUTING.md

.github\ISSUES.md
https://github.com/CleverRaven/Cataclysm-DDA/blob/master/ISSUES.md

1. ты работаешь только через консоль или же через git-gui? Советую второе (хотя это и обрезанное по самое не балуй недоприложение).
1) В git bash переходишь в свой master (твой локальный репозиторий) командой git checkout master.
2) git pull origin - эта команда обновляет твой master, скачивая все изменения с твоего origin (твой репозиторий на гитхабе). Чтобы и репозиторий на гитхабе был обновлён до последней версии, лично я пользуюсь https://upriver.github.io/ Наверняка есть и другие способы, в том числе и через bash, но мне лень их искать.
3) Итак, твой локальный репозиторий полностью обновлён. Заходишь в git-gui, выбираешь в меню вверху Branch, затем Create. Вводишь имя для ветки, в разделе Starting revision выбираешь master. Создаётся ветка, основанная на твоём master.
4) В твоём локальном репозитории ищешь файлы, которые хочешь изменить, и меняешь в них что-нибудь. После изменения нажимай в git-gui rescan. Программа покажет тебе изменения.
5) Если они тебя устраивают, нажимай state changed. Потом - commit (не забудь написать описание), потом - push.
6) Всё, твои изменения улетели в репозиторий на гитхабе. Заходишь на гитхабе в репозиторий CleverRaven, видишь там появившуюся строку "Your recently pushed changes", нажимаешь кнопку Compare. Создаешь таким образом PR.
2. Работаю только онлайн, никакого стороннего ПО не использую.

Windows XP
http://gitforwindows.org/requirements.html
https://github.com/git-for-windows/git/releases/tag/v2.10.0.windows.1
Git for Windows XP latest PortableGit-2.10.0-32-bit.7z.exe

splincode.github.io/text/git










выводит информацию обо всех изменениях:
внесенных в дерево директорий проекта по сравнению с последним коммитом рабочей ветки
отдельно выводятся внесенные в индекс и неиндексированные файлы
указывает файлы с неразрешенными конфликтами слияния
файлы, игнорируемые git
git checkout master
git checkout -f
git status

# скачать весь репо, ветку master.zip
https://github.com/<user>/<repo>/archive/<ref>.zip
https://github.com/django/django/archive/master.zip
https://github.com/Kenan2000/CDDA-Kenan-Modpack/archive/master.zip

# внести в индекс все изменения, включая все новые файлы
cd ..
ls
cd 2
cd 4pda
св CDDA

cd CleverRaven/Cataclysm-DDA
cd Noctifer-de-Mortem/nocts_cata_mod
cd korick/CDDA
cd pisskop/PKs_Rebalancing
cd Dissociativity/PKs_Rebalancing
cd Siyalatas/PKs_Rebalancing
cd SomeDeadGuy/Cata-MSX-DeadPeopleTileset
cd 23rd/PotPlayerExtentions

https://github.com/korick/
https://github.com/korick/2.git
https://github.com/korick/CDDA.git
https://github.com/korick/CDDA/raw/master/CDDA_Lore.doc
https://github.com/korick/4pda.git


http://githubuniverse.com Join us (virtually) December 8-10 for 3 days of content, customizable tracks, and the latest from GitHub. 

git clone https://github.com/SomeDeadGuy/UndeadPeopleTileset.git

# обновить свою копию чужого репо
git pull

git reset
git status
git log
git add --all

# залить изменения своего репо
git add .
git commit -m "upd"
git push -f

git add "manual_Redmi_6.txt"
git commit -m "mR6_r_upd"
git push -f

# создание нового репозитория ветка master: запросит имя и пароль
git init или git clone
копируешь README.md в пустой репозиторий
git add README.md
git commit -m "first commit"
git remote add origin https://USER:PASSWORD@github.com/user.git
git remote add origin gituser@githost:project.git или https://github.com/user.git
git push -u origin master
добавить в .git\config чтоб не вводить постоянно
url=https://USER:PASSWORD@github.com/user.git
[branch "master"]
	remote = origin
	merge = refs/heads/master

# отменить последний коммит
git commit -m "mistake"
git revert HEAD # это полностью команда
git revert HEAD --no-edit
git reset HEAD~1 
<< edit files >>
git add ...
git commit -c ORIG_HEAD

# Очистка всей Истории в Git
$ git status
$ git reset
Создайте временную ветку и перейдите в неё:
$ git checkout --orphan temp_branch
--orphan  # Создать ветку в состоянии схожем с git init
Добавьте все файлы в новую ветку и сделайте коммит изменений:
$ git add --all
$ git commit -am "first commit"
Удалите master-ветку:
$ git branch -D master
Переименуйте временную ветку в master:
$ git branch -m master
Принудительно обновите удаленный репозиторий:
$ git push -f origin master

# Очистка Истории на ПК
удалить .git
git init
git remote add origin gituser@githost:project.git
добавить в .git\config
[branch "master"]
	remote = origin
	merge = refs/heads/master

git clone - создание копии (удаленного) репозитория
git fetch и git pull - забираем изменения из центрального репозитория
git push - вносим изменения в удаленный репозиторий
git reset --hard commitId

# синхронизация Cataclysm-DDA если только ветка origin/master
git pull

# из индекса и дерева одновременно проекта файл можно удалить командой
git rm FILE1 FILE2 - отдельные файлы

# удалить из документации все файлы txt из папки
git rm Documentation/\*.txt

# сбросить нафиг весь индекс
git reset
git reset HEAD .
git rm -r --cached .

# удалить из индекса конкретный файл
git reset - EDITEDFILE

# коммит автоматически индексируя изменения в файлах
Новые файлы индексироваться не будут
Удаление файлов будет учтено
git commit -a

# коммит прямо из командной строки вместо текстового редактора
git commit -m «commit comment»

# коммит на основе изменений единственного файла
git commit FILENAME





















PNG, JPG, GIF, PSD, SVG
https://help.github.com/articles/set-up-git/
https://help.github.com/articles/syncing-a-fork/
https://help.github.com/articles/fork-a-repo/
https://guides.github.com/activities/forking/

В оригинальный репозиторий, если у вас нет прав, можно присылать только pull-request-ы
Из оригинального можно делать просто pull для синхронизации

git config --global user.name "Mona Lisa"
git config --global user.name
> Mona Lisa
git config --global user.email "email@example.com"
git config --global user.email
> email@example.com

# Syncing local fork 1st
git remote add -f upstream https://github.com/CleverRaven/Cataclysm-DDA.git
git remote add upstream https://github.com/CleverRaven/Cataclysm-DDA.git
git remote -v
git fetch upstream
git checkout master
git merge upstream/master

# next time
git checkout origin/master
git pull

git clone https://github.com/korick/Redmi6.git
git remote add origin https://github.com/korick/Redmi6.git

Сообщаем локальному репозиторию о том, где находится главный репозиторий:
$ git remote add origin gituser@githost:project.git
Теперь оправляем коммит в главный репозиторий
$ git push origin master
Переходим в новый каталог (или вообще на другой комп) и вытягиваем главный репозиторий:
$ cd /новый/каталог/проекта
$ git clone gituser@githost:project.git
Это мы получили копию главного репозитория. В ней находится актуальная ветка. Теперь нужно создать тестовую ветку.
Просто скопируем актуальную ветку в главный репозиторий под именем тестовой:
$ git push origin master:stage
А затем вытянем тестовую ветку из главного репозитория уже под собственным именем:
$ git checkout -b stage origin/stage
Теперь локальный репозиторий содержит две ветки, master и stage. Обе ветки связаны с одноименными ветками в главном репозитории.
В этом локальном репозитории ведущий разработчик будет проверять бранчи, присланные другими разработчиками, и сливать проверенны бранчи с ветками главного репозитория.
Кроме того, нужно указать местонахождение рабочего репозитория dev:
$ git remote add dev gituser@githost:dev.git
...
Отладочная копия проекта устроена идентично, за исключением того, что после клонирования главного репозитория было сделано переключение с актуальной ветки master на тестовую ветку stage:
$ git checkout -b stage origin/stage
Теперь pull в отладке будет вытягивать обновления из тестовой ветки.



git clone или git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/korick/Redmi6.git
git push -u origin master


FILE TO GITHUB-REPO
$ git add .
$ git commit -m "Add existing file"
$ git push origin master

LOCAL-REPO TO GITHUB
$ cd project
$ git init
$ git add .
$ git commit -m "Add local project to GitHub"
# At the top of your GitHub repository Quick Setup page, click to copy remote repository URL
$ git remote add origin <remote repository URL>
# Sets the new remote
$ git remote -v
# Verifies the new remote URL
$ git push origin master

or create a new repository on the command line
echo "# Redmi6" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/korick/Redmi6.git
git push -u origin master

or push an existing repository from the command line
git remote add origin https://github.com/korick/Redmi6.git
git push -u origin master

MERGE UPSTREAM-REPO INTO YOUR FORK
$ git checkout master
$ git pull <https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git> <BRANCH_NAME>
# Commit the merge
# Review the changes and ensure they are satisfactory
# Push the merge to your GitHub repository
$ git push origin master


git checkout -b <new-feature>
# создать ветвь new-feature
git branch new-feature
# начать в ней работать
git checkout new-feature

git merge new-feature master


git log --oneline --graph --color --all --decorate

## Создание ветви
git status
# Создание ветви
git branch
# Для переключения между ветвями
git checkout
# краткая команда создать ветвь и сразу переключиться на нее
git checkout -b
git add commit
























1)
Username for 'https://github.com' error: failed to execute prompt script (exit code 1)
fatal: could not read Username for 'https://github.com': No error

.git/config.file
delete [remote "origin"] section
$ git remote add origin https://{username}:{password}@github.com/{username}/project.git
$ git push
or
.git/config.file
write manualy [remote "origin"] section
[remote "origin"]
	url = https://{username}:{password}@github.com/{username}/project.git
	fetch = +refs/heads/*:refs/remotes/origin/*
2)
fatal: unable to access SSL certificate problem: certificate is not yet valid
check your time
	
	
	



cd {project}

git add [.] [--no-all] [dir/file1]

git commit -m "upd" [-F <file> | -m <msg>]

git commit -i vk_changelog.txt -m "mod"
--file=<filecommitdescription> 

git push -f
[-f | --force] [--all | --mirror | --tags]







https://github.com/search/advanced
https://github.com/settings/applications #Authorized OAuth Apps
https://github.com/settings/security-log

https://github.com/transifex/transifex-client
https://github.com/PeridexisErrant/starter-pack
https://github.com/CleverRaven/Cataclysm-DDA #CDDA
https://github.com/cataclysmbnteam/Cataclysm-BN #CBN
https://github.com/remyroy/CDDA-Game-Launcher
https://github.com/GMC-Modding-Team/Community-Mod-Compilation-Deprecated #Huge-Mods-Pack-TheGoatGod original
https://github.com/GMC-Modding-Team/Community-Mod-Compilation-redux #Huge-Mods-Pack-TheGoatGod Goats-Dark_Days
https://github.com/Kenan2000/CDDA-Kenan-Modpack #Huge-Mods-Pack Kenans personal modpack for CDDA
https://github.com/Kenan2000/Bright-Nights-Kenan-Mod-Pack #Huge-Mods-Pack Kenans personal modpack for CBN
https://github.com/SomeDeadGuy/UndeadPeopleTileset #Tileset
https://github.com/I-am-Erk/CDDA-Tilesets/ #new official Tileset 
https://codeload.github.com/chaosvolt/Cata-MSX-DeadPeopleTileset-Backup/zip/master
https://github.com/dissociativity/PKs_Rebalancing
https://github.com/Siyalatas/PKs_Rebalancing #old
https://github.com/pisskop/PKs_Rebalancing #old
https://github.com/chaosvolt/cdda-arcana-mod
https://github.com/Noctifer-de-Mortem/nocts_cata_mod
https://github.com/foulman/Psioniclysm
https://discourse.cataclysmdda.org/t/fallout-new-england/17509
https://discourse.cataclysmdda.org/t/secronom-zombies-mod-thread/16211
https://github.com/foulman/Fantasy
https://github.com/captainsawbones/Sly_Mutation_Mod_Medley
https://github.com/redxlaser15/Reds-Odd-Additions
https://github.com/tyrael93/Ascension
https://github.com/Kenan2000/BL9 # > v10981+
https://github.com/Kenan2000/Secronom-Zombies
https://github.com/Kenan2000/Otopack-Mods-Updates #soundpack


https://github.com/23rd/PotPlayerExtentions




https://github.com/firefoxForUser/esr38config
https://github.com/muslayev/iceweasel-win64
https://github.com/muslayev/icecat-win64

https://github.com/asciimoo/morty #HTML sanitizer proxy service
https://github.com/The-OP/Fox
https://github.com/The-OP/Fox/blob/master/greylist.md#user-content-ublock
https://github.com/The-OP/Fox/blob/master/addendum.md#настройки-aboutconfig
https://github.com/Guest007/Rosenfox

https://github.com/pyllyukko/user.js#installation #откл телеметрия Firefox
https://github.com/arkenfox/user.js
https://github.com/Crandel/home/blob/master/termux/firefox/user.js#L270
https://github.com/Crandel/home/blob/master/termux/firefox/chrome/userChrome.css
userContent.css стили Настройка внешнего вида Firefox лёгкий фикс
prefs.js работает без ваших принуждений, т.к. в нём хранятся все изменённые значения настроек;
user.js нужен для переопределения и блокировки значений отдельных настроек от изменений (эти изменения можно вносить во время сеанса, после перезапуска они будут сброшены на указанное в файле значение)
https://github.com/palant/searchlinkfix
https://github.com/amq/fi018 #1330-14 Сб,пдм
https://github.com/amq/firefox-debloat
https://github.com/TheCreeper/PrivacyFox
Есть ли под Pale Moon какой-то аналог ClearURLs https://github.com/ClearURLs/Addon
- есть похожее расширение, но оно без фильтров https://addons.palemoon.org/addon/modify-http-response/
фильтры от ClearURLs есть здесь https://gitlab.com/KevinRoebert/ClearUrls/raw/master/data/data.min.json
но я, не представляю, можно ли их туда прикрутить и как.
- PureURL версии 1.2.3 https://addons.palemoon.org/releases/pureurl4pm/
с версии 2.0 автор сильно переделал расширение и мне не очень понравился новый вариант.
это расширение я успешно установил и использую [?] также в FF 52 и Serpent 52
https://github.com/Feodor2/Mypal/releases
https://github.com/Feodor2/Centaury/releases
https://github.com/ray-lothian/UserAgent-Switcher
https://github.com/JustOff/ca-archive #Catalog classic Firefox add-ons created before WebExtensions apocalypse


https://github.com/cheat-engine/cheat-engine/
https://github.com/pavel-pimenov/flylinkdc-r5xx
https://github.com/mpc-hc/mpc-hc
https://github.com/8HoLoN/Extension-HDS-Link-Detector
https://github.com/jrw-git/cataclysm_utility
https://www.transifex.com/cataclysm-dda-translators/cataclysm-dda/language/ru/
https://github.com/Franiac/TwitchLeecher
https://github.com/Skulltrail192/One-Core-Api/ #для Win2k3/XP
https://github.com/Skulltrail192/One-Core-API-Binaries/
Проект основан на наработках ReactOS Development Team и Wine Team
Добавляет в WinXP/2k3 частичную поддержку DirectX11 и позволяет запускать некоторые приложения для более новых систем
https://github.com/deadlyjack/code-editor #Acode
https://gitlab.com/fdroid/rfp/issues #f-droid
https://github.com/microsoft/PowerToys #TuneUp W10
https://github.com/ilius/pyglossary


https://github.com/ytdl-org/youtube-dl/blob/master/README.md
https://github.com/pystardust/ytfzf #Скрипт posix, находит видео Youtube (без API) открывать/загружать mpv/youtube-dl терминал
https://github.com/Shail-Shouryya/yt_videos_list
https://github.com/BennyJeanZ/Fetch-Youtube-Data
https://github.com/m-julian/Youtube-playlist-title-and-url-downloader
https://github.com/jasperan/youtube-crawler
https://github.com/nilaoda/N_m3u8DL-CLI/blob/master/README_ENG.md #m3u8DL
https://github.com/MattMcManis/Axiom #youtube и FFmpeg GUI. удобно копировать последовательность команды для youtube.
+ https://github.com/dbeley/youtube_extract
+ Automate http://gallery.ru-board.com/topic.cgi?forum=5&topic=3782
https://github.com/m417z/Textify




















































